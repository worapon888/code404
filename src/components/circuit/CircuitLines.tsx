"use client";
import { useRef, useMemo, useEffect } from "react";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

const vertex = `
uniform float uTime;
uniform vec2 uMouse;

varying float vWave;
varying vec3 vPosition;

void main() {
  vec3 pos = position;

  // üåÄ Warp ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á mouse ‚Üí vertex
  vec2 scaledMouse = uMouse * 20.0;     // ‚ú® match ‡∏Å‡∏±‡∏ö world space grid
  vec2 delta = pos.xy - scaledMouse;
  float dist = length(delta);   // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
  float force = 1.0 / (dist + 0.5);  // ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏¢‡∏¥‡πà‡∏á‡πÅ‡∏£‡∏á

  // ‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î XY (‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏â‡∏≤‡∏Å‡∏Å‡∏±‡∏ö delta)
  vec2 dir = normalize(vec2(-delta.y, delta.x)); 
  pos.xy += dir * force;

  // üßµ ‡∏¢‡πâ‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
  float twistSpeed = 1.5;
  float waveSpeed = 2.5;

  float angle = uTime * twistSpeed + pos.x * 0.5 + pos.y * 0.4;
  float radius = 0.35 + 0.15 * sin(pos.x * 2.0 + uTime * 1.5);

  pos.x += cos(angle) * radius;
  pos.y += sin(angle + pos.x * 0.2) * radius * 0.8;

  // ripple ‡πÄ‡∏ö‡∏≤ ‡πÜ
  pos.z += sin(pos.x * 3.0 + uTime * waveSpeed) * 0.15;
  pos.z += cos(pos.y * 2.0 + uTime * 1.2) * 0.1;
  pos.z += sin(pos.x * 0.5 + uTime * 1.0) * 0.2;
pos.z += sin(pos.y * 0.5 + uTime * 1.3) * 0.2;

  vWave = sin(pos.x * 2.0 + uTime * 2.5) * 0.5 + 0.5;
  vPosition = pos;

  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
}

`;

const fragment = `
uniform float uTime;
uniform vec2 uMouse;

varying float vWave;
varying vec3 vPosition;

void main() {
  // üß† scale mouse ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô world
  vec2 scaledMouse = uMouse * 20.0;
  float distToMouse = length(vPosition.xy - scaledMouse);

  // üîÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö base
  float baseAlpha = 0.06 + 0.06 * vWave; // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°

  // üéö ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
  float falloff = clamp(1.0 - distToMouse * 0.025, 0.0, 1.0); // range ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏¥‡∏î
  float alpha = baseAlpha * falloff;

  // üé® ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö contrast
  vec3 base = vec3(0.0, 0.85, 1.0);         // ‡∏ü‡πâ‡∏≤‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  vec3 blend = vec3(0.0, 0.15, 0.25);       // ‡∏°‡∏∑‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
  vec3 color = mix(base, blend, vWave * 0.5); // ‚úÖ blend ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á = contrast ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô

  // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° flicker ‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î
  float flicker = sin(vPosition.x * 10.0 + uTime * 1.5) * cos(vPosition.y * 10.0 + uTime * 1.2);
  color += 0.03 * flicker;

  gl_FragColor = vec4(color, alpha);
}
`;

export default function CircuitLines() {
  const ref = useRef<THREE.LineSegments>(null);
  const mouse = useRef<[number, number]>([0, 0]);

  const geometry = useMemo(() => {
    const geo = new THREE.BufferGeometry();
    const positions: number[] = [];

    const size = 20;
    const spacing = 1;

    for (let z = -2; z <= 2; z++) {
      for (let i = -size; i <= size; i += spacing) {
        // ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
        positions.push(i, -size, z, i, size, z);
        // ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        positions.push(-size, i, z, size, i, z);
        // ‡πÄ‡∏â‡∏µ‡∏¢‡∏á /
        positions.push(-size, -size + i, z, size, size - i, z);
        // ‡πÄ‡∏â‡∏µ‡∏¢‡∏á \
        positions.push(-size, size - i, z, size, -size + i, z);
      }
    }

    geo.setAttribute(
      "position",
      new THREE.Float32BufferAttribute(positions, 3)
    );
    return geo;
  }, []);

  useEffect(() => {
    const handleMove = (e: MouseEvent) => {
      const x = (e.clientX / window.innerWidth) * 2 - 1;
      const y = (e.clientY / window.innerHeight) * -2 + 1;
      mouse.current = [x, y];
    };
    window.addEventListener("mousemove", handleMove);
    return () => window.removeEventListener("mousemove", handleMove);
  }, []);

  useFrame(({ clock }) => {
    const t = clock.getElapsedTime();

    if (ref.current) {
      const mat = ref.current.material as THREE.ShaderMaterial;

      // ‚è± ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ shader
      mat.uniforms.uTime.value = t;

      // üñ± ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ó‡∏µ‡πà normalize ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ shader
      mat.uniforms.uMouse.value.set(mouse.current[0], mouse.current[1]);
    }
  });

  return (
    <lineSegments ref={ref} geometry={geometry}>
      <shaderMaterial
        vertexShader={vertex}
        fragmentShader={fragment}
        transparent
        blending={THREE.AdditiveBlending}
        depthWrite={false}
        uniforms={{
          uTime: { value: 0 },
          uMouse: { value: new THREE.Vector2(0, 0) }, // ‚ú® ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
        }}
      />
    </lineSegments>
  );
}
